// Code generated by hertz generator.

package main

import (
	"fmt"
	"log"
	"net"
	"os"
	"time"

	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/dogkerr/mailing-service/m/v2/config"
	"github.com/dogkerr/mailing-service/m/v2/internal/rest"
	"github.com/dogkerr/mailing-service/m/v2/pb"
	"github.com/dogkerr/mailing-service/m/v2/pkg"
	"github.com/dogkerr/mailing-service/m/v2/service"
	"github.com/hertz-contrib/pprof"
	"google.golang.org/grpc"
)

func main() {
	cfg, err := config.NewConfig()
	if err != nil {
		hlog.Fatalf("Config error: %s", err)
	}
	logsCores := pkg.InitZapLogger(cfg)
	defer logsCores.Sync()
	hlog.SetLogger(logsCores)

	// Get env
	grpcPort := os.Getenv("GRPC_PORT")
	httpPort := os.Getenv("HTTP_PORT")

	// gRPC Server
	emailServer := service.NewEmailServer()
	grpcServer := grpc.NewServer()
	pb.RegisterEmailServiceServer(grpcServer, emailServer)

	address := fmt.Sprintf("localhost:%s", grpcPort)
	listener, err := net.Listen("tcp", address)
	if err != nil {
		log.Fatalf("cannot start server: %v", err)
	}

	go func() {
		log.Printf("start server on port %s", address)
		err = grpcServer.Serve(listener)
		if err != nil {
			log.Fatalf("cannot start server: %v", err)
		}
	}()

	// HTTP Server
	httpAddress := fmt.Sprintf("localhost:%s", httpPort)
	customValidationErr := pkg.CreateCustomValidationError()
	h := server.Default(
		server.WithHostPorts(httpAddress),
		server.WithValidateConfig(customValidationErr),
		server.WithExitWaitTime(4*time.Second),
	)
	h.Use(pkg.AccessLog())

	rest.EmailRouter(h)
	pprof.Register(h)

	h.Spin()
}
